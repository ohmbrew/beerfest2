#config_version=5
##! mode: vs_breakout

# vs_breakout is a VS mode that pits player against a Breakout (r) style video game. Ping pong balls will fall from top at some angle,
#   and player uses flippers to move red solo cup back and forth to try and catch ball. 3 times and they win. A miss loses.
# pongball: 80x80 pixels
# cup: 160x209
# vs_breakout is started because one of the following occurred:
# 1. Player has not filled up mug (i.e. game theme mode not enabled) and has hit rimrules/mode saucers
#    a. 50% of the time, vs will start. Other 50% of the time, old original audio callout and popout will happen
# 2. Player has filled up mug (i.e. game theme mode is enabled) and has hit rimrules/mode saucers
#    a. 50% of the time, vs will start. Other 50% of the time, game theme mode will start

# Note: when copying, must update:
#  - mode start_events
#  - mode stop_events
#  - player_health_drain restart event (if applicable - otherwise delete)
#  - slide names in slides:
#  - slide names in slide_player:
#  - variable_player
#  - base mode vs_breakout_stopped: to update country insert
#  - shows: update show name
#  - show_player: update show names
#  - event player: choose random opponent
#  - update Field.yaml to include new VS challenge
#  - add mode to config.yaml

mode:
  start_events: start_mode_vs_breakout
  stop_events: game_ended, stop_mode_vs_breakout, start_mode_bonusv2

counters:
  ball_count:   # keep track of which ball we're on
    enable_events: mode_vs_breakout_started
    count_events: ball_result_win, ball_result_lose
    count_complete_value: 3
    disable_on_complete: false
    reset_on_complete: false
  win_count:  # keep track of ball wins
    enable_events: mode_vs_breakout_started
    count_events: ball_result_win
  lose_count: # keep track of ball losses
    enable_events: mode_vs_breakout_started
    count_events: ball_result_lose

timers:
  # update_frame and framerate are used to update our game field
  update_frame:    # ensure that player health meter gets update *after* we update image location variables
    start_value: 1
    end_value: 0
    direction: down
    tick_interval: .05s
    control_events:
      - action: restart
        event: timer_framerate_complete
      - action: stop
        event: stop_update_timers
      - action: stop
        event: vs_result_lose
  framerate:     # called every 100ms. 1) update ball image based on x/y velocities. 2) update player cup left/right based on left/right flipper states
    start_value: 1
    end_value: 0
    direction: down
    tick_interval: .1s
    restart_on_complete: true
    control_events:
      - action: restart
        event: slide_vs_breakout_status_active
      - action: restart
        event: vs_breakout_newball
      - action: stop
        event: ball_result_win
      - action: stop
        event: ball_result_lose
      - action: stop
        event: stop_update_timers
      - action: stop
        event: vs_result_win
      - action: stop
        event: vs_result_lose   

  vs_breakout_update_vs_pos:
    start_value: 1
    end_value: 0
    direction: down
    tick_interval: 1s
    control_events:
      - action: restart
        event: slide_vs_breakout_intro_active
      - action: restart
        event: slide_vs_breakout_win_active
      - action: restart
        event: slide_vs_breakout_lose_active  

  # the third ball result sound kept getting started twice, and so the events_when_stopped were happening twice...wtf. Try a timer instead
  ball_result_sound_delay:
    start_value: 1
    end_value: 0
    direction: down
    tick_interval: 2.5s
    control_events:
      - action: restart
        event: ball_result_win
      - action: restart
        event: ball_result_lose

event_player:
  slide_vs_breakout_win_removed:
    stop_mode_vs_breakout
  slide_vs_breakout_lose_removed:
    stop_mode_vs_breakout
  slide_vs_breakout_intro_active:
    - init_ball
    - flippers_disabled

  # want to play video mode without ball in play
  #slide_vs_breakout_intro_removed{device.switches.s_kicker_rimrules.state==1}: kicker_rimrules_eject
  #slide_vs_breakout_intro_removed{device.switches.s_kicker_mode.state==1}: kicker_mode_eject

  # init ball.x, ball.y, cup.x
  init_ball:
    - rnd_ball_x
    - init_ball_y
    - rnd_ball_vx
    - rnd_cup_x
    
  timer_framerate_complete{(device.switches.s_flipper_left.state == 1) and (current_player.cup_x > 130)}: move_cup_left    # can move left
  timer_framerate_complete{(device.switches.s_flipper_left.state == 1) and (current_player.cup_x <= 130)}: move_cup_far_left  # within limit of moving, so set to far left
  timer_framerate_complete{(device.switches.s_flipper_right.state == 1) and (current_player.cup_x < 1236)}: move_cup_right
  timer_framerate_complete{(device.switches.s_flipper_right.state == 1) and (current_player.cup_x >= 1236)}: move_cup_far_right
  timer_framerate_complete: move_ball

  timer_update_frame_complete:
    update_cup:
      new_x: {value: current_player.cup_x}
      type: int
    update_ball:
      new_x:
        value: current_player.ball_x
        type: int
      new_y:
        value: current_player.ball_y
        type: int
  # ball is 40x40 (anchorx center, anchory center), cup is 80x80 (anchorx center, anchory bottom)
  move_ball{current_player.ball_y < 275 and current_player.ball_x > current_player.cup_x - 80 and current_player.ball_x < current_player.cup_x + 80}: # ball_y (middle) is at the top of cup. check if we are within bounds of cup
    ball_result_win:
      cup_x: {value: current_player.cup_x}
      type: int
  move_ball{current_player.ball_y < 275 and ((current_player.ball_x < current_player.cup_x - 80) or (current_player.ball_x > current_player.cup_x + 80))}: # ball_y (middle) is at the top of cup. check if we are within bounds of cup
    ball_result_lose:
      ball_x: {value: current_player.ball_x}
      type: int
  ball_result_win:
    play_result_win
  timer_ball_result_sound_delay_complete{device.counters.ball_count.value < 3}:
    - init_ball
    - vs_breakout_newball
  timer_ball_result_sound_delay_complete{device.counters.ball_count.value == 3 and device.counters.win_count.value == 0}:
    vs_result_lose
  timer_ball_result_sound_delay_complete{device.counters.ball_count.value == 3 and device.counters.win_count.value == 1}:
    - vs_result_win1
    - vs_result_win
  timer_ball_result_sound_delay_complete{device.counters.ball_count.value == 3 and device.counters.win_count.value == 2}:
    - vs_result_win2
    - vs_result_win
  timer_ball_result_sound_delay_complete{device.counters.ball_count.value == 3 and device.counters.win_count.value == 3}:
    - vs_result_win3
    - vs_result_win

  timer_vs_breakout_update_vs_pos_complete{current_player.opponent == "CANADA"}:
    adjust_vs:
      new_x: 550
      type: int
  timer_vs_breakout_update_vs_pos_complete{current_player.opponent == "SCOTLAND"}:
    adjust_vs:
      new_x: 483
      type: int
  timer_vs_breakout_update_vs_pos_complete{current_player.opponent == "IRELAND"}:
    adjust_vs:
      new_x: 550
      type: int
  timer_vs_breakout_update_vs_pos_complete{current_player.opponent == "TOBAGO"}:
    adjust_vs:
      new_x: 550
      type: int
  timer_vs_breakout_update_vs_pos_complete{current_player.opponent == "GERMANY"}:
    adjust_vs:
      new_x: 515
      type: int

sound_player:
  slide_vs_breakout_intro_active:
    crowd:
      loops: -1
    introrepeat:
      action: stop
    boom_x4:
      action: play
  vs_result_win:
    crowd:
      action: stop
    voice_vs_win:
      action: play
  vs_result_lose:
    crowd:
      action: stop
    voice_vs_lose:
      action: play
  mode_vs_breakout_stopping:
    crowd:
      action: stop
  play_result_win{device.counters.win_count.value == 1}:
    voice_nicesink1:
      action: play
      loops: 0
  play_result_win{device.counters.win_count.value == 2}:
    voice_nicesink2:
      action: play
      loops: 0   
  play_result_win{device.counters.win_count.value == 3}:
    voice_dirtyharry:
      action: play
      loops: 0
  ball_result_lose:
    voice_frustrating:
      action: play
      loops: 0

shows:
  vs_breakout_flash_usa:
    - duration: 1
      lights:
        usa_left: (color)
        usa_right: (color)
    - duration: 1
      lights:
        usa_left: off
        usa_right: off
  vs_breakout_flash_opponent:
    - duration: 1
      lights:
        (led_left): (color)
        (led_right): (color)
    - duration: 1
      lights:
        (led_left): off
        (led_right): off

show_player:
  mode_vs_breakout_started:
    vs_breakout_flash_usa:
      loops: -1
      speed: 4
      show_tokens:
        color: yellow
    vs_breakout_flash_opponent:
      loops: -1
      speed: 4
      show_tokens:
        led_left: (current_player.opponent_left)
        led_right: (current_player.opponent_right)
        color: yellow
  mode_vs_breakout_stopping:
    vs_breakout_flash_usa:
      action: stop
    vs_breakout_flash_opponent:
      action: stop
  vs_result_win:
    vs_breakout_flash_usa:
      loops: -1
      speed: 4
      priority: 4000
      show_tokens:
        color: green
    vs_breakout_flash_opponent:
      loops: -1
      speed: 4
      priority: 4000
      show_tokens:
        led_left: (current_player.opponent_left)
        led_right: (current_player.opponent_right)
        color: red
  vs_result_lose:
    vs_breakout_flash_usa:
      loops: -1
      speed: 4
      priority: 4000
      show_tokens:
        color: red
    vs_breakout_flash_opponent:
      loops: -1
      speed: 4
      priority: 4000
      show_tokens:
        led_left: (current_player.opponent_left)
        led_right: (current_player.opponent_right)
        color: green

slides:
  vs_breakout_mini:
    - type: image
      image: TextOnMini-VideoMode
      animations:
        show_slide:
          - property: opacity
            value: 1
            duration: 0.5s
            easing: in_out_quint
          - property: opacity
            value: 0
            duration: 0.5s
            repeat: true
            easing: in_out_quint
    - type: image
      image: TextOnMini-CatchPongBalls
    - type: image
      image: minibg

  vs_breakout_intro:
    widgets:
    - type: text
      text: USA
      font_size: 25
      font_name: druillet
      anchor_x: left
      anchor_y: center
      x: left + 30
      y: middle + 200
      color: 008ce5ff
      animations:
        show_slide:
          - property: font_size
            value: 175
            duration: .5s
    - type: text
      text: vs
      font_size: 25
      font_name: druillet
      anchor_x: center
      anchor_y: center
      x: middle - 200
      y: middle + 200
      color: 008ce5ff
      opacity: 0
      animations:
        adjust_vs:
          - property: x
            value: (new_x)
            duration: 0s
          - property: opacity
            value: 1
            duration: 0
            timing: after_previous
          - property: font_size
            value: 175
            duration: .25s
            timing: with_previous
    - type: text
      text: (opponent)
      font_size: 25
      font_name: druillet
      anchor_x: right
      anchor_y: center
      x: right
      y: middle + 200
      color: 008ce5ff
      opacity: 0
      animations:
        show_slide:
          - property: opacity
            value: 0
            duration: 2s
          - property: opacity
            value: 1
            duration: 0
            timing: after_previous
          - property: font_size
            value: 175
            duration: .25s
            timing: with_previous
    - type: text
      text: VIDEO MODE
      font_size: 25
      font_name: druillet
      anchor_x: middle
      anchor_y: middle
      x: middle
      y: middle - 59
      color: 008ce5ff
      opacity: 0
      animations:
        show_slide:
          - property: opacity
            value: 0
            duration: 3s
          - property: opacity
            value: 1
            duration: 0
            timing: after_previous
          - property: font_size
            value: 125
            duration: .25s
            timing: with_previous
    - type: text
      text: FLIPPERS MOVE CUP
      font_size: 25
      font_name: druillet
      anchor_x: middle
      anchor_y: middle
      x: middle
      y: middle - 250
      color: 008ce5ff
      opacity: 0
      animations:
        show_slide:
          - property: opacity
            value: 0
            duration: 3s
          - property: opacity
            value: 1
            duration: 0
            timing: after_previous
          - property: font_size
            value: 125
            duration: .25s
            timing: with_previous        
    - type: image
      image: background





  vs_breakout_status:
    widgets:
    - type: image
      image: cup
      anchor_x: middle
      anchor_y: bottom
      x: middle
      y: bottom + 46
      animations:
        update_cup:
          - property: x
            value: (new_x)
            duration: 0s
    - type: image
      image: redx
      anchor_x: middle
      anchor_y: middle
      x: middle
      y: 688
      opacity: 0
      animations:
        ball_result_lose:
          - property: x
            value: (ball_x)
            duration: 0s
          - property: y
            value: 235
            duration: 0s
            timing: with_previous
          - property: opacity
            value: 1
            duration: .25s
            timing: after_previous
          - property: opacity
            value: 1
            duration: .75s
            timing: after_previous
          - property: opacity
            value: 0
            duration: .25s
            timing: after_previous
    - type: image
      image: pongball
      anchor_x: middle
      anchor_y: middle
      x: middle
      y: 688
      animations:
        update_ball:
          - property: x
            value: (new_x)
            duration: .1s
          - property: y
            value: (new_y)
            timing: with_previous
            duration: .1s
    - type: image
      image: splash1
      anchor_x: middle
      anchor_y: bottom
      x: middle
      y: 688
      opacity: 0
      animations:
        ball_result_win:
          - property: x
            value: (cup_x)
            duration: 0s
          - property: y
            value: 255
            duration: 0s
            timing: with_previous
          - property: opacity
            value: 1
            duration: .25s
            timing: after_previous
          - property: opacity
            value: 1
            duration: .75s
            timing: after_previous
          - property: opacity
            value: 0
            duration: .25s
            timing: after_previous
    - type: image
      image: splash2
      anchor_x: middle
      anchor_y: bottom
      x: middle
      y: 688
      opacity: 0
      animations:
        ball_result_win:
          - property: opacity
            value: 0
            duration: .25s
          - property: x
            value: (cup_x)
            duration: 0s
            timing: with_previous
          - property: y
            value: 255
            duration: 0s
            timing: with_previous
          - property: opacity
            value: 1
            duration: .25s
            timing: after_previous   
          - property: opacity
            value: 1
            duration: .5s
            timing: after_previous
          - property: opacity
            value: 0
            duration: .25s
            timing: after_previous     
    - type: image
      image: splash3
      anchor_x: middle
      anchor_y: bottom
      x: middle
      y: 688
      opacity: 0
      animations:
        ball_result_win:
          - property: opacity
            value: 0
            duration: .5s
          - property: x
            value: (cup_x)
            duration: 0s
            timing: with_previous
          - property: y
            value: 255
            duration: 0s
            timing: with_previous
          - property: opacity
            value: 1
            duration: .25s
            timing: after_previous
          - property: opacity
            value: 0
            duration: .25s
            timing: after_previous   
    - type: image
      image: background




  vs_breakout_win:
    widgets:
    - type: text
      text: USA
      font_size: 25
      font_name: druillet
      anchor_x: left
      anchor_y: center
      x: left + 30
      y: middle + 200
      color: 008ce5ff
      animations:
        show_slide:
          - property: font_size
            value: 150
            duration: .5s
    - type: text
      text: vs
      font_size: 25
      font_name: druillet
      anchor_x: center
      anchor_y: center
      x: middle - 200
      y: middle + 200
      color: 008ce5ff
      opacity: 0
      animations:
        adjust_vs:
          - property: x
            value: (new_x)
            duration: 0s
          - property: opacity
            value: 1
            duration: 0
            timing: after_previous
          - property: font_size
            value: 175
            duration: .25s
            timing: with_previous
    - type: text
      text: (opponent)
      font_size: 25
      font_name: druillet
      anchor_x: right
      anchor_y: center
      x: right
      y: middle + 200
      color: 008ce5ff
      opacity: 0
      animations:
        show_slide:
          - property: opacity
            value: 0
            duration: 2s
          - property: opacity
            value: 1
            duration: 0
            timing: after_previous
          - property: font_size
            value: 150
            duration: .25s
            timing: with_previous
    - type: text
      text: PLAYER WINS
      font_size: 25
      font_name: druillet
      anchor_x: center
      anchor_y: center
      x: middle
      y: middle
      color: green
      opacity: 0
      animations:
        show_slide:
          - property: opacity
            value: 0
            duration: 2.5s
          - property: opacity
            value: 1
            duration: 0
            timing: after_previous
          - property: font_size
            value: 150
            duration: .25s
            timing: with_previous
    - type: text
      text: (player|vs_breakout_total)
      number_grouping: true
      min_digits: 1
      font_name: druillet
      color: green
      font_size: 10
      anchor_x: middle
      anchor_y: middle
      x: middle
      y: middle - 200
      opacity: 0
      animations:
        show_slide:
        - property: opacity
          value: 0
          duration: 2.5s
        - property: opacity
          value: 1
          duration: 0
          timing: after_previous
        - property: font_size
          value: 150
          duration: .25s
          timing: with_previous 
    - type: image
      image: background

  vs_breakout_lose:
    widgets:
    - type: text
      text: USA
      font_size: 25
      font_name: druillet
      anchor_x: left
      anchor_y: center
      x: left + 30
      y: middle + 200
      color: 008ce5ff
      animations:
        show_slide:
          - property: font_size
            value: 150
            duration: .5s
    - type: text
      text: vs
      font_size: 25
      font_name: druillet
      anchor_x: center
      anchor_y: center
      x: middle - 200
      y: middle + 200
      color: 008ce5ff
      opacity: 0
      animations:
        adjust_vs:
          - property: x
            value: (new_x)
            duration: 0s
          - property: opacity
            value: 1
            duration: 0
            timing: after_previous
          - property: font_size
            value: 175
            duration: .25s
            timing: with_previous
    - type: text
      text: (opponent)
      font_size: 25
      font_name: druillet
      anchor_x: right
      anchor_y: center
      x: right
      y: middle + 200
      color: 008ce5ff
      opacity: 0
      animations:
        show_slide:
          - property: opacity
            value: 0
            duration: 2s
          - property: opacity
            value: 1
            duration: 0
            timing: after_previous
          - property: font_size
            value: 150
            duration: .25s
            timing: with_previous
    - type: text
      text: PLAYER LOSES
      font_size: 25
      font_name: druillet
      anchor_x: center
      anchor_y: center
      x: middle
      y: middle - 100
      color: red
      opacity: 0
      animations:
        show_slide:
          - property: opacity
            value: 0
            duration: 2.5s
          - property: opacity
            value: 1
            duration: 0
            timing: after_previous
          - property: font_size
            value: 200
            duration: .25s
            timing: with_previous       
    - type: image
      image: background

slide_player:
  mode_vs_breakout_started:
    vs_breakout_intro:
      target: main
      priority: 4000
      expire: 5s
    vs_breakout_mini:
      target: mini
      priority: 4000
  slide_vs_breakout_intro_removed:
    vs_breakout_status:
      target: main
      priority: 4000
  vs_result_win:
    vs_breakout_status:
      target: main
      action: remove
    vs_breakout_win:
      target: main
      expire: 5s
      priority: 4000
  vs_result_lose:
    vs_breakout_status:
      target: main
      action: remove
    vs_breakout_lose:
      target: main
      expire: 5s
      priority: 4000

random_event_player:
  rnd_ball_x:
    - set_ball_x_183
    - set_ball_x_283
    - set_ball_x_383
    - set_ball_x_483
    - set_ball_x_583
    - set_ball_x_683
    - set_ball_x_783
    - set_ball_x_883
    - set_ball_x_983
    - set_ball_x_1083
    - set_ball_x_1183
  rnd_ball_vx:
    - set_ball_vx_10
    - set_ball_vx_20
    - set_ball_vx_30
    - set_ball_vx_40
    - set_ball_vx_50
    - set_ball_vx_n10
    - set_ball_vx_n20
    - set_ball_vx_n30
    - set_ball_vx_n40
    - set_ball_vx_n50
  rnd_cup_x:
    - set_cup_x_383
    - set_cup_x_483
    - set_cup_x_583
    - set_cup_x_683
    - set_cup_x_783
    - set_cup_x_883
    - set_cup_x_983

variable_player:
  mode_vs_breakout_stopping: # clear VS active bit
    is_in_vs:
      int: 0
      action: set
  mode_vs_breakout_started:
    ball_x:
      int: 683
      action: set
    ball_y:
      int: 688
      action: set
    cup_x:
      int: 683
      action: set
    cup_y:
      int: 46   # this puts bottom of cup right above lower border of background
      action: set
    is_in_vs:
      int: 1
      action: set
  # gives player points and sets total for win slide
  vs_result_win1:
    score: current_player.pts_vs_breakout_1ball
    vs_breakout_total:
      int: current_player.pts_vs_breakout_1ball
      action: set
  vs_result_win2:
    score: current_player.pts_vs_breakout_2balls
    vs_breakout_total:
      int: current_player.pts_vs_breakout_2balls
      action: set
      
  vs_result_win3:
    score: current_player.pts_vs_breakout_3balls  
    vs_breakout_total:
      int: current_player.pts_vs_breakout_3balls
      action: set

  vs_result_lose:
    vs_breakout_total:
      int: 0
      action: set
 
  vs_result_win{current_player.opponent == "CANADA"}:   # top left
    has_canada:
      action: set
      int: 1
  vs_result_win{current_player.opponent == "SCOTLAND"}: # top right
    has_scotland:
      action: set
      int: 1
  vs_result_win{current_player.opponent == "IRELAND"}:  # middle left
    has_ireland:
      action: set
      int: 1
  vs_result_win{current_player.opponent == "TOBAGO"}:   # middle right
    has_tobago:
      action: set
      int: 1
  vs_result_win{current_player.opponent == "GERMANY"}:  # bottom left
    has_germany:
      action: set
      int: 1

  # sets a random ball.x location from random_event_player
  set_ball_x_183:
    ball_x:
      int: 183
      action: set
  set_ball_x_283:
    ball_x:
      int: 283
      action: set
  set_ball_x_383:
    ball_x:
      int: 383
      action: set
  set_ball_x_483:
    ball_x:
      int: 483
      action: set
  set_ball_x_583:
    ball_x:
      int: 583
      action: set
  set_ball_x_683:
    ball_x:
      int: 683
      action: set
  set_ball_x_783:
    ball_x:
      int: 783
      action: set
  set_ball_x_883:
    ball_x:
      int: 883
      action: set
  set_ball_x_983:
    ball_x:
      int: 983
      action: set
  set_ball_x_1083:
    ball_x:
      int: 1083
      action: set
  set_ball_x_1183:
    ball_x:
      int: 1183
      action: set

  set_ball_y_775:
    ball_y:
      int: 775
      action: set

  # sets a random ball.vx velocity from random_event_player
  set_ball_vx_10:
    ball_vx:
      int: 10
      action: set
  set_ball_vx_20:
    ball_vx:
      int: 20
      action: set
  set_ball_vx_30:
    ball_vx:
      int: 30
      action: set
  set_ball_vx_40:
    ball_vx:
      int: 40
      action: set
  set_ball_vx_50:
    ball_vx:
      int: 50
      action: set
  set_ball_vx_n10:
    ball_vx:
      int: -10
      action: set
  set_ball_vx_n20:
    ball_vx:
      int: -20
      action: set
  set_ball_vx_n30:
    ball_vx:
      int: -30
      action: set
  set_ball_vx_n40:
    ball_vx:
      int: -40
      action: set
  set_ball_vx_n50:
    ball_vx:
      int: -50
      action: set

  # sets a random cup.x position from random_event_player
  set_cup_x_383:
    cup_x:
      int: 383
      action: set
  set_cup_x_483:
    cup_x:
      int: 483
      action: set
  set_cup_x_583:
    cup_x:
      int: 583
      action: set
  set_cup_x_683:
    cup_x:
      int: 683
      action: set
  set_cup_x_783:
    cup_x:
      int: 783
      action: set
  set_cup_x_883:
    cup_x:
      int: 883
      action: set
  set_cup_x_983:
    cup_x:
      int: 983
      action: set

  # inits ball.y position
  init_ball_y:
    ball_y:
      int: 688
      action: set

  # moves cup.x location
  move_cup_left:
    cup_x:
      int: current_player.cup_x - 25
      action: set
  move_cup_far_left:
    cup_x:
      int: 80
      action: set
  move_cup_right:
    cup_x:
      int: current_player.cup_x + 25
      action: set
  move_cup_far_right:
    cup_x:
      int: 1286
      action: set

  move_ball:
    move_done:
      int: 0
      action: set
  
  # moves ball.x and ball.y based on ball.vx and ball.vy. ball.vx is randomly sent via random_event_player, ball.vy is fixed at 10 pixels per update (negative)
  move_ball{(current_player.move_done == 0) and (current_player.ball_vx > 0) and (current_player.ball_x + current_player.ball_vx < 1326)}:    # ball has room to move right
    ball_x:
      int: current_player.ball_x + current_player.ball_vx
      action: set
    ball_y:
      int: current_player.ball_y + current_player.ball_vy
      action: set
    move_done:
      int: 1
      action: set
  move_ball{(current_player.move_done == 0) and (current_player.ball_vx > 0) and (current_player.ball_x + current_player.ball_vx >= 1326)}:
    ball_vx:
      int: current_player.ball_vx * -1    # we hit a wall - flip velocity direction
      action: set
    ball_x:
      int: 1326   # move to far right of screen
      action: set
    move_done:
      int: 1
      action: set
    ball_y:
      int: current_player.ball_y + current_player.ball_vy
      action: set
  move_ball{(current_player.move_done == 0) and (current_player.ball_vx < 0) and (current_player.ball_x + current_player.ball_vx > 40)}:  # ball has room to move left
    ball_x:
      int: current_player.ball_x + current_player.ball_vx
      action: set
    ball_y:
      int: current_player.ball_y + current_player.ball_vy
      action: set
    move_done:
      int: 1
      action: set
  move_ball{(current_player.move_done == 0) and (current_player.ball_vx < 0) and (current_player.ball_x + current_player.ball_vx <= 40)}:
    ball_vx:
      int: current_player.ball_vx * -1    # we hit a wall - flip velocity direction
      action: set
    ball_x:
      int: 40     # move to far left of screen
      action: set
    move_done:
      int: 1
      action: set
    ball_y:
      int: current_player.ball_y + current_player.ball_vy
      action: set
