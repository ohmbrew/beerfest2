#config_version=5
##! mode: upf

# The slides in this show are coordinated with base mode's monkeychug slide and audio activity.
# Monkeychug bonus slide (and audio) take priority. This is accomplished using player vars and timers to track if Monkeychug Bonus slide is active
# Monkeychug bonus slide active is set immediately when shot_monkeychug is hit. If we also completed a UPF Bonus (all 3 tgts hit), that logic block (accrual and state machine)
# will be processed *after* the Monkeychug bonus is played/recorded.
# If Monkeychug target was not hit last in the UPF bonus accrual, the UPF Bonus slides will show immediately (is_monkeychug_active will not be set)
#   - so the is_slide_x_queued will still be set, but will be cleared when UPF bonus slide is removed. We'll also never get the show_queued_upf_bonus event
# If Monkeychug target was hit last in the UPF bonus accrual, the Monkeychug process will start first, and UPF Bonus slides will *not* show immediately, because
# is_monkeychug_active will be set.
#   - so the is_slide_x_queued will still be set while monkeychug bonus slide is active. When a timer in base mode completes (it is started when monkeychug slide is active),
#     it will fire the show_queued_upf_bonus event, and this upf mode has conditional events on that event and if any upf bonus slide is queued (there should only be one),
#     it will show that slide. Upon slide removal, its is_slide_x_queued player var will be cleared.

mode:
  start_events: mode_base_started
  stop_events: game_ended

sound_player:
  # these will play only when upf bonus slides are active. There's arbitration that happens between Monkeychug and UPF Bonus slides.
  # Monkeychug bonus slide takes priority
  slide_slide_bonus_upf1_active:
    voice_sink1left:
      action: play
  slide_slide_bonus_upf2_active:
    voice_sink1left:
      action: play
  slide_slide_bonus_hammered_active:
    voice_emchammered:
      action: play

accruals:
  upf_bonus_accrual:
    persist_state: true
    events:
      - shot_upf_tgt_left_hit
      - shot_upf_tgt_right_hit
      - shot_horseshoe_hit
    events_when_complete: award_upf_bonus
    reset_on_complete: true
    disable_on_complete: false

state_machines:
  upf:
    persist_state: true
    states:
      start:
        label: UPF Started
      wait_for_upf1:
        label: Waiting for UPF Accrual 1
      wait_for_upf2:
        label: Waiting for UPF Accrual 2
        events_when_started: upf_bonus1_award
      wait_for_hammered:
        label: Waiting for UPF Hammered
        events_when_started: upf_bonus2_award
      hammered_loop:
        label: Waiting for another UPF Hammered
        events_when_started: upf_hammered_award

    transitions:
      # for reference - conditional event DEVICE. not DEVICES.
      #  events: mode_multiball_started{device.ball_devices.bd_lock.balls==2}
      - source: start
        target: wait_for_upf1      # init
        events: mode_upf_started

      - source: wait_for_upf1      
        target: wait_for_upf2
        events: award_upf_bonus    # got upf_bonus1

      - source: wait_for_upf2      
        target: wait_for_hammered
        events: award_upf_bonus    # got upf_bonus2

      - source: wait_for_hammered
        target: hammered_loop
        events: award_upf_bonus    # got upf_hammered

      - source: hammered_loop         # keep awarding for hammered
        target: hammered_loop
        events: award_upf_bonus    # got upf_hammered


slides:
  slide_bonus_upf1:
    widgets:
    - type: text
      text: PADDLE
      font_size: 150
      font_name: druillet
      anchor_x: center
      anchor_y: top
      x: middle
      y: top - 35
      color: 008ce5ff
    - type: text
      text: BONUS
      font_size: 150
      font_name: druillet
      anchor_x: center
      anchor_y: top
      x: middle
      y: top - 210
      color: 008ce5ff
    - type: text
      text: (player|pts_upf_bonus1)
      number_grouping: true
      min_digits: 1
      font_size: 10
      font_name: druillet
      anchor_x: center
      anchor_y: top
      x: middle
      y: top - 425
      color: 008ce5ff
      animations:
        show_slide:
          - property: font_size
            value: 200
            duration: .5s
    - type: image
      image: background
  slide_bonus_upf2:
    widgets:
    - type: text
      text: PADDLE
      font_size: 150
      font_name: druillet
      anchor_x: center
      anchor_y: top
      x: middle
      y: top - 35
      color: 008ce5ff
    - type: text
      text: BONUS
      font_size: 150
      font_name: druillet
      anchor_x: center
      anchor_y: top
      x: middle
      y: top - 210
      color: 008ce5ff
    - type: text
      text: (player|pts_upf_bonus2)
      number_grouping: true
      min_digits: 1
      font_size: 10
      font_name: druillet
      anchor_x: center
      anchor_y: top
      x: middle
      y: top - 425
      color: 008ce5ff
      animations:
        show_slide:
          - property: font_size
            value: 200
            duration: .5s
    - type: image
      image: background
  slide_bonus_hammered:
    widgets:
    - type: text
      text: E = MC
      font_size: 150
      font_name: druillet
      anchor_x: center
      anchor_y: top
      x: middle
      y: top - 35
      color: 008ce5ff
    - type: text
      text: HAMMERED BONUS
      font_size: 150
      font_name: druillet
      anchor_x: center
      anchor_y: top
      x: middle
      y: top - 210
      color: 008ce5ff
    - type: text
      text: (player|pts_upf_hammered)
      number_grouping: true
      min_digits: 1
      font_size: 10
      font_name: druillet
      anchor_x: center
      anchor_y: top
      x: middle
      y: top - 425
      color: 008ce5ff
      animations:
        show_slide:
          - property: font_size
            value: 200
            duration: .5s
    - type: image
      image: background

slide_player:
  # upf_x_award events are fired when UPF bonus state machine changes states - meaning we should get a bonus.
  # only show slide_bonus_x if not in das boot mode AND the monkeychug slide is not showing. Monkeychug slide gets preference
  # is_slide_monkeychug_active player var is set right when monkeychug switch (s_horseshoe) is hit.
  # Monkeychug bonus slide takes priority over UPF bonus slides.
  upf_bonus1_award{mode.dasboot.active == False and current_player.is_slide_monkeychug_active == 0}:
    slide_bonus_upf1:
      target: main
      priority: 1000
      expire: 2s
  upf_bonus2_award{mode.dasboot.active == False and current_player.is_slide_monkeychug_active == 0}:
    slide_bonus_upf2:
      target: main
      priority: 1000
      expire: 2s
  upf_hammered_award{mode.dasboot.active == False and current_player.is_slide_monkeychug_active == 0}:
    slide_bonus_hammered:
      target: main
      priority: 1000
      expire: 2s
  # not sure I need this, but if monkeychug slide goes active, remove all slide_bonus_x if they were created.
  # initial testing shows that the conditional event on is_slide_monkeychug_active prevents the upf_x_award slides from showing
  slide_slide_bonus_monkeychug_active:
    slide_bonus_upf1:
      target: main
      action: remove
    slide_bonus_upf2:
      target: main
      action: remove  
    slide_bonus_hammered:
      target: main
      action: remove
  # show appropriate slide_bonus_x UPF bonus slides if they were queued for showing
  show_queued_upf_bonus{current_player.is_slide_upf1_queued}:
      slide_bonus_upf1:
        target: main
        priority: 1000
        expire: 2s
  show_queued_upf_bonus{current_player.is_slide_upf2_queued}:
      slide_bonus_upf2:
        target: main
        priority: 1000
        expire: 2s
  show_queued_upf_bonus{current_player.is_slide_hammered_queued}:
      slide_bonus_hammered:
        target: main
        priority: 1000
        expire: 2s

shows:
  show_light_horseshoe1:
    - time: 0
      lights:
        arrow_horseshoe1: green
    - duration: -1
  show_light_horseshoe2:
    - time: 0
      lights:
        arrow_horseshoe2: green
    - duration: -1
  show_light_horseshoe3:
    - time: 0
      lights:
        arrow_horseshoe3: green
    - duration: -1

show_player:
  mode_upf_started{device.accruals.upf_bonus_accrual.value[0]}: show_light_horseshoe1
  mode_upf_started{device.accruals.upf_bonus_accrual.value[0] == 0}:
    show_light_horseshoe1:
      action: stop
  mode_upf_started{device.accruals.upf_bonus_accrual.value[1]}: show_light_horseshoe2
  mode_upf_started{device.accruals.upf_bonus_accrual.value[1] == 0}:
    show_light_horseshoe2:
      action: stop
  mode_upf_started{device.accruals.upf_bonus_accrual.value[2]}: show_light_horseshoe3
  mode_upf_started{device.accruals.upf_bonus_accrual.value[2] == 0}:
    show_light_horseshoe3:
      action: stop

  mode_upf_started{device.state_machines.upf.state == "wait_for_upf1"}:
    show_light_horseshoe1:
      action: stop
    show_light_horseshoe2:
      action: stop
    show_light_horseshoe3:
      action: stop  
  mode_upf_started{device.state_machines.upf.state == "wait_for_upf2"}: show_light_horseshoe1
  mode_upf_started{device.state_machines.upf.state == "wait_for_hammered"}:
    show_light_horseshoe1:
      action: play
    show_light_horseshoe2:
      action: play  
  mode_upf_started{device.state_machines.upf.state == "hammered_loop"}:
    show_light_horseshoe1:
      action: play
    show_light_horseshoe2:
      action: play 
    show_light_horseshoe3:
      speed: 4

  # show_light_upf_bonus1:
  #   action: stop
  # show_light_upf_bonus2:
  #   action: stop
  # show_light_upf_hammered:
  #   action: stop

  award_upf_bonus:   # located in /upf/shows folder
    bonus_upf_show:
      speed: 4
      loops: 0
  upf_bonus1_award: show_light_horseshoe1
  upf_bonus2_award: show_light_horseshoe2
  award_upf_bonus_show_complete:   # reset horseshoe lights
    show_light_horseshoe1:
      action: stop
    show_light_horseshoe2:
      action: stop
    show_light_horseshoe3:
      action: stop
  upf_hammered_award:
    show_light_upf_hammered:
      speed: 4


variable_player:
  # upf_x_award events are fired when UPF bonus state machine changes states - meaning we should get a bonus
  # give player the points immediately and set player var that we should queue UPF bonus slide for showing
  upf_bonus1_award{mode.dasboot.active == False}:  
    score: current_player.pts_upf_bonus1
    is_slide_upf1_queued:
      int: 1
      action: set
  upf_bonus2_award{mode.dasboot.active == False}:
    score: current_player.pts_upf_bonus2
    is_slide_drinko2_queued:
      int: 1
      action: set
  upf_hammered_award{mode.dasboot.active == False}:
    score: current_player.pts_upf_hammered
    is_slide_hammered_queued:
      int: 1
      action: set

  # de-queue UPF bonus slide once it has been removed
  slide_slide_bonus_upf1_removed:
    is_slide_upf1_queued:
      int: 0
      action: set 
  slide_slide_bonus_upf2_removed:    
    is_slide_upf2_queued:
      int: 0
      action: set
  slide_slide_bonus_hammered_removed:
    is_slide_hammered_queued:
      int: 0
      action: set

  

  
